cmake_minimum_required(VERSION 3.10)
project(imageio CXX)

if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set(GenericOptions -Wall)
    set(ReleaseOptions -O2)
    set(AlwaysSmallOptions -Os)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set(GenericOptions -Wall)
    set(ReleaseOptions -O2)
    set(AlwaysSmallOptions -Os)
#elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
#  # using Intel C++
#elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
#  # using Visual Studio C++
else()
    set(GenericOptions "")
    set(ReleaseOptions "")
endif()

if (UNIX AND NOT APPLE)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
    find_package(Threads REQUIRED)
endif()

enable_testing()

set(Sources common/JSONParsers.cpp)

add_executable(unittest common/unittest.cpp ${Sources})
target_include_directories(unittest SYSTEM PRIVATE /usr/local/include)
target_include_directories(unittest PRIVATE common)
target_compile_definitions(unittest PRIVATE TESTDOC_UNITTEST)
target_compile_features(unittest PRIVATE cxx_std_17)
target_include_directories(unittest PRIVATE common)
target_compile_options(unittest PRIVATE ${GenericOptions})
if ("${CMAKE_BUILD_TYPE}" STREQUAL "RELEASE")
    target_compile_options(unittest PRIVATE ${ReleaseOptions})
endif()
if (UNIX AND NOT APPLE)
    target_link_libraries(unittest PRIVATE Threads::Threads)
endif()
add_test(NAME UnitTest COMMAND unittest)

#add_executable(writeimage common/unittest.cpp ${Sources} )
#target_include_directories(writeimage SYSTEM /usr/local/include)
#target_include_directories(writeimage PRIVATE common)
#target_compile_features(writeimage PRIVATE cxx_std_17)
#target_include_directories(writeimage PRIVATE common )
#target_compile_options(writeimage PRIVATE ${GenericOptions} )
#if ("${CMAKE_BUILD_TYPE}" STREQUAL "RELEASE")
    #target_compile_options(writeimage PRIVATE ${ReleaseOptions} )
#endif()
#if (UNIX AND NOT APPLE)
    #target_link_libraries(writeimage PRIVATE Threads::Threads)
#endif()
